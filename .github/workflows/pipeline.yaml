name: CI/CD Pipeline

on:
  push:
    branches: [ develop, master ]
  pull_request:
    types: [ opened, synchronize, closed ]
    branches: [ master ]

jobs:
  test:
    # Run tests for:
    # 1. All pushes to develop
    # 2. All PRs to master
    # 3. When PR is merged to master
    if: |
      github.ref == 'refs/heads/develop' ||
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_DB: tmsdb
          POSTGRES_USER: dbuser
          POSTGRES_PASSWORD: dbpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U dbuser -d tmsdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety

    - name: Check formatting with Black
      run: black . --check

    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics

    - name: Run tests with coverage
      env:
        DATABASE_NAME: tmsdb
        DATABASE_USERNAME: dbuser
        DATABASE_PASSWORD: dbpassword
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DJANGO_SETTINGS_MODULE: TitansManager.settings
        SECRET_KEY: testing_key
      run: |
        pytest --cov=. --cov-report=term-missing --cov-fail-under=50

  build-develop:
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push develop image
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/titans-manager:${{ github.sha }} .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/titans-manager:${{ github.sha }}

  deploy-production:
    needs: test
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest
    environment: wackops

    steps:
    - uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Setup kubectl and kubelogin
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        curl -LO https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
        unzip kubelogin-linux-amd64.zip
        sudo install -o root -g root -m 0755 bin/linux_amd64/kubelogin /usr/local/bin/kubelogin

    - name: Create namespace if not exists
      run: |
        kubectl create namespace wackops --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to AKS
      run: |
        # Update image tag in deployment yaml
        sed -i "s|image:.*|image: ${{ secrets.ACR_LOGIN_SERVER }}/titans-manager:${{ github.sha }}|" kubernetes/deployment.yaml
        
        # Apply K8s configurations with namespace
        kubectl apply -f kubernetes/configmap.yaml -n wackops
        kubectl apply -f kubernetes/deployment.yaml -n wackops
        kubectl apply -f kubernetes/service.yaml -n wackops
        kubectl apply -f kubernetes/ingress.yaml -n wackops
        kubectl apply -f kubernetes/hpa.yaml -n wackops
        
        # Wait for deployment to complete
        kubectl rollout status deployment/tms-app -n wackops

    - name: Verify Deployment
      run: |
        echo "Checking deployment status..."
        kubectl rollout status deployment/tms-app -n wackops
        
        echo "Checking pod status..."
        kubectl get pods -l app=tms-app -n wackops
        
        echo "Checking service status..."
        kubectl get svc tms-app -n wackops
        
        echo "Checking HPA status..."
        kubectl get hpa tms-app-hpa -n wackops