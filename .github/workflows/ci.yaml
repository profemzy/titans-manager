name: Continuous Integration

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12', '3.13']

    services:
      postgres:
        image: postgres:17.2
        env:
          POSTGRES_DB: tmsdb
          POSTGRES_USER: dbuser
          POSTGRES_PASSWORD: dbpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U dbuser -d tmsdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety

    - name: Check formatting with Black
      run: black . --check

    - name: Lint with flake8
      run: |
        flake8 . --count --show-source --statistics

    - name: Run tests with coverage
      env:
        DATABASE_NAME: tmsdb
        DATABASE_USERNAME: dbuser
        DATABASE_PASSWORD: dbpassword
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DJANGO_SETTINGS_MODULE: TitansManager.settings
        SECRET_KEY: testing_key
      run: |
        pytest --cov=. --cov-report=term-missing --cov-fail-under=50

    - name: Generate coverage report artifact
      if: success() || failure()
      run: |
        pytest --cov=. --cov-report=html

  build-develop:
    needs: test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push image to ACR
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/titans-manager:develop-${{ github.sha }} .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/titans-manager:develop-${{ github.sha }}